[=[;m42kup.renderer] API]

[;;;(lang=javascript)
renderer: {
    ast2nt: <Function>,
    TextNode: <Function>,
    HtmlNode: <Function>,
    ErrorNode: <Function>,
    ElementClass: <Function>,
    Element: <Function>
}
]

[==[;ast2nt(ast, options)]]

AST로부터 노드의 트리를 만듭니다.

[**Parameters]

[ul
	[*] [;ast <Object>]: AST. 형식은 [~(href='./formats.html')입출력 형식] 참조.
	[*] [;options <Object>]: 렌더링 옵션. 글로벌 옵션을 cascade 함. 가능한 옵션은 [~(href='./options.html')렌더링 옵션] 참조.
]

[**Returns]

[;<Element>] 노드 트리의 최상단 요소. 형식은 [;<Element>]가 갖는 속성 참조.

[==[;Node()]]

노드 트리에서 사용되는 노드 클래스를 구현합니다. 딱히 하는 것은 없음.

[**Inherited by]

[ul
	[*] [;TextNode]
	[*] [;HtmlNode]
	[*] [;ErrorNode]
	[*] [;Element]
]

[==[;TextNode(text)]]

노드 트리에서 텍스트를 표현하는 클래스입니다. [;new] 키워드와 함께 사용하세요.

[>(type=info)
	[;new ElementClass({name, display, render, ?split})]의 [;render] 콜백의 반환값을 만들기 위해서는 [;Element.prototype.text(...)]를 쓰세요.
]

[**Parameters]

[ul
	[*] [;text <string>]: 텍스트.
]

[**Inherits]

[ul
	[*] [;Node]
]

[==[;HtmlNode({html, display})]]

노드 트리에서 HTML을 표현하는 클래스입니다. [;new] 키워드와 함께 사용하세요.

[>(type=warn)[;html] 인자에 이스케이프 되지 않은 텍스트를 집어넣으면 XSS 취약점이 발생할 수 있습니다.]

[>(type=info)
	[;new ElementClass({name, display, render, ?split})]의 [;render] 콜백의 반환값을 만들기 위해서는 [;Element.prototype.html(...)]을 쓰세요.
]

[**Parameters]

[ul
	[*] [;html <string>]: HTML 코드.
	[*] [;display <string>]: 디스플레이 타입. [;"inline"], [;"leaf-block"], [;"container-block"]  중 하나여야 합니다.
]

[**Inherits]

[ul
	[*] [;Node]
]

[==[;ErrorNode({message, code})]]

노드 트리에서 에러를 표현하는 클래스입니다. [;new] 키워드와 함께 사용하세요.

[>(type=info)
	[;new ElementClass({name, display, render, ?split})]의 [;render] 콜백의 반환값을 만들기 위해서는 [;Element.prototype.error(...)]를 쓰세요.
]

[**Inherits]

[ul
	[*] [;Node]
]

[==[;ElementClass({name, display, render, ?split})]]

새로운 m42kup 요소 종류를 만듭니다. [;new] 키워드와 함께 사용하세요.

어떤 [;ElementClass] 인스턴스와 [;Element] 인스턴스의 관계는 HTML DOM에서의 [;HTMLParagraphElement] 등의 클래스와 그 인스턴스의 관계와 비슷하다고 할 수 있겠습니다. 새로운 클래스를 만드는 대신 [;ElementClass] 인스턴스를 만든다고 할 수 있겠습니다.

[**Parameters]

[ul
	[*] [;`name <string>`]: 요소 이름.
	[*] [;`display <string>`]: 요소의 디스플레이 타입. [;"inline"], [;"leaf-block"], [;"container-block"]  중 하나여야 합니다.
	[*] [;`render <Function (element <Element>, options <Object>) => <TextNode | HtmlNode | ErrorNode>>`]: 렌더링 함수. 렌더링 할 [;Element](이름이 해당 [;ElementClass]와 같음)와 렌더링 옵션을 입력받아 [;TextNode], [;HtmlNode], [;ErrorNode] 중 하나를 반환합니다.
	[*] [;`split <string | string[]>`] (optional): 컨텐트를 분리시킬 구분자 또는 구분자의 리스트. 예를 들어 [;`[ol]`]의 경우 [;'*']이고 [;`[table]`]의 경우 [;`['*', '**']`].
]

[**Examples]

[;;;(lang=javascript)`<<
var i = new ElementClass({
    name: 'i',
    display: 'inline',
    render: (el, options) => {
        return el.html(`<i>${el.innerHtml}</i>`);
    }
});
>>`]


[==[;Element({name, display, render, code, attributes, children, ?split, options})]]

노드 트리에서 텍스트를 표현하는 클래스입니다. 이걸 직접 생성하는 것은 현재 지원하지 않고 내부적으로 [;ElementClass]로부터 생성됩니다.

[**Inherits]

[ul
	[*] [;Node]
]

[==[;Element.prototype.text(text)]]

텍스트 노드를 반환하고 싶을 때 사용합니다. [;<Element>.text(...)] 형태로 사용하세요.

[**Parameters]

[ul
	[*] [;text <string>]: 텍스트.
]

[**Returns]

[;<TextNode>] 만들어진 [;TextNode] 인스턴스.

[**Examples]

[;;;(lang=javascript)`<<
// asdf -> fdsa
var reverse = new ElementClass({
    name: 'reverse',
    display: 'inline',
    render: (el, options) => {
        if (!el.innerIsText)
            return el.error('Non-text input');

        return el.text(el.innerText.split('').reverse().join());
    }
});
>>`]	

[==[;Element.prototype.html(html)]]

HTML 노드를 반환하고 싶을 때 사용합니다. [;<Element>.html(...)] 형태로 사용하세요.

[>(type=warn)[;html] 인자에  [;<Element>.innerText]를 비롯한 이스케이프 되지 않은 텍스트를 집어넣으면 XSS 취약점이 발생할 수 있습니다.]

[**Parameters]

[ul
	[*] [;html <string>]: HTML 코드.
]

[**Returns]

[;<HtmlNode>] 만들어진 [;HtmlNode] 인스턴스.

[**Examples]

[;;;(lang=javascript)`<<
// <i>...</i>
var i = new ElementClass({
    name: 'i',
    display: 'inline',
    render: (el, options) => {
        return el.html(`<i>${el.innerHtml}</i>`);
    }
});
>>`]

[==[;Element.prototype.error(message)]]

에러 노드를 반환하고 싶을 때 사용합니다. [;<Element>.error(...)] 형태로 사용하세요.

[**Parameters]

[ul
	[*] [;message <string>]: 에러 메시지. 이스케이프 되지 않은 텍스트를 집어넣어도 됩니다.
]

[**Returns]

[;<ErrorNode>] 만들어진 [;ErrorNode] 인스턴스.

[**Examples]

[;;;(lang=javascript)`<<
// asdf -> fdsa
var reverse = new ElementClass({
    name: 'reverse',
    display: 'inline',
    render: (el, options) => {
        if (!el.innerIsText)
            return el.error('Non-text input');

        return el.text(el.innerText.split('').reverse().join());
    }
});
>>`]

[==[;Element.prototype.getAttribute(name)]]

[;name]에 대응하는 속성 값을 반환합니다. 여러 개 있을 경우 제일 처음에 작성된 것이 반환됩니다. 없으면 [;null].

[**Parameters]

[ul
	[*] [;name <string>]: 속성 이름.
]

[**Returns]

[;<string>] 제일 왼쪽에 있는 속성 값. 없으면 [;null].

[==[;Element.prototype.escapeHtml(string)]]

평범한 HTML 이스케이프 함수입니다.

[**Parameters]

[ul
	[*] [;string <string>]: 이스케이프 할 문자열.
]

[**Returns]

[;<string>] HTML 이스케이프 된 문자열.

[==[;<Element>]가 갖는 속성]

[>(type=info)[;new ElementClass({name, display, render, ?split})]의 [;render] 콜백으로 전달되는 [;Element] 인스턴스의 경우 렌더링 되기 전이므로 [;isError], [;errorMessage], [;outerIsText], [;outerText], [;outerHtml] 속성을 사용할 수 없습니다.]

[ul
	[*] [;name <string>]: 요소의 이름.

	[*] [;`children <Node[]>`]: 요소의 자식 노드 리스트.

	[*] [;display <string>]: 요소의 디스플레이 타입. [;"inline"], [;"leaf-block"], [;"container-block"]  중 하나.

	[*] [;code <string>]: 요소의 m42kup 코드.

	[*] [;attributes<Array>]: [;{name, value}]의 0개 이상의 배열.

	[*] [;`split <string | string[]>`]: 컨텐트를 분리시킬 구분자 또는 구분자의 리스트. 예를 들어 [;`[ol]`]의 경우 [;'*']이고 [;`[table]`]의 경우 [;`['*', '**']`]. 구분하지 않으면 [;undefined].

	[*] [;isError <boolean>]: 렌더링 결과 에러가 났는지 여부.

	[*] [;errorMessage <string>]: 렌더링 결과 에러가 났을 경우 에러 메시지. 아니면 [;null].

	[*] [;innerIsText <boolean>]: 내부 컨텐트가 텍스트로 인식될 수 있는지 여부. [;<Element>.split]이 설정되어 있을 경우 구분자에 의해 분리된 내부 컨텐트의 차원과 일치하는 중첩 배열입니다.

	[*] [;innerText <string>]: 텍스트 형태의 내부 컨텐트. [;<Element>.innerIsText == false]일 경우 [;null]. [;<Element>.split]이 설정되어 있을 경우 구분자에 의해 분리된 내부 컨텐트의 차원과 일치하는 중첩 배열입니다.

	[*] [;innerHtml <string>]: HTML 형태의 내부 컨텐트. 내부 컨텐트의 타입과 관련 없이 항상 제공됩니다. [;<Element>.split]이 설정되어 있을 경우 구분자에 의해 분리된 내부 컨텐트의 차원과 일치하는 중첩 배열입니다.

	[*] [;outerIsText <boolean>]: 렌더링 결과가 텍스트로 인식될 수 있는지 여부.

	[*] [;outerText <string>]: 텍스트 형태의 렌더링 결과. [;<Element>.outerIsText == false]일 경우 [;null].

	[*] [;outerHtml <string>]: HTML 형태의 렌더링 결과. 렌더링 결과의 타입과 관련 없이 항상 제공됩니다.
]