var m42kup =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/peg.js":
/*!*********************!*\
  !*** ./dist/peg.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(children) {\r\n      \t\treturn {\r\n      \t\t\troot: {\r\n      \t\t\t\ttype: 'root',\r\n      \t\t\t\tchildren,\r\n      \t\t\t\tlocation: location()\r\n      \t\t\t}\r\n      \t\t}\r\n      \t},\n      peg$c1 = function(lbm, name, separator, children, rbm) {\r\n      \t\treturn {\r\n      \t\t\ttype: 'element',\r\n      \t\t\tlbm,\r\n      \t\t\tname,\r\n      \t\t\tseparator,\r\n      \t\t\tchildren,\r\n      \t\t\trbm,\r\n      \t\t\tlocation: location()\r\n      \t\t}\r\n      \t},\n      peg$c2 = \"[\",\n      peg$c3 = peg$literalExpectation(\"[\", false),\n      peg$c4 = \"<\",\n      peg$c5 = peg$literalExpectation(\"<\", false),\n      peg$c6 = function(a, b) {return (bstack[bstack.length - 1] || 0) <= b.length + 1},\n      peg$c7 = function(a, b) {return a + b.join('')},\n      peg$c8 = function(a) {bstack.push(a.length); return a},\n      peg$c9 = \"!\",\n      peg$c10 = peg$literalExpectation(\"!\", false),\n      peg$c11 = \"\\\"\",\n      peg$c12 = peg$literalExpectation(\"\\\"\", false),\n      peg$c13 = \"#\",\n      peg$c14 = peg$literalExpectation(\"#\", false),\n      peg$c15 = \"$\",\n      peg$c16 = peg$literalExpectation(\"$\", false),\n      peg$c17 = \"%\",\n      peg$c18 = peg$literalExpectation(\"%\", false),\n      peg$c19 = \"&\",\n      peg$c20 = peg$literalExpectation(\"&\", false),\n      peg$c21 = \"'\",\n      peg$c22 = peg$literalExpectation(\"'\", false),\n      peg$c23 = \")\",\n      peg$c24 = peg$literalExpectation(\")\", false),\n      peg$c25 = \"*\",\n      peg$c26 = peg$literalExpectation(\"*\", false),\n      peg$c27 = \"+\",\n      peg$c28 = peg$literalExpectation(\"+\", false),\n      peg$c29 = \",\",\n      peg$c30 = peg$literalExpectation(\",\", false),\n      peg$c31 = \"-\",\n      peg$c32 = peg$literalExpectation(\"-\", false),\n      peg$c33 = \"/\",\n      peg$c34 = peg$literalExpectation(\"/\", false),\n      peg$c35 = \";\",\n      peg$c36 = peg$literalExpectation(\";\", false),\n      peg$c37 = \"=\",\n      peg$c38 = peg$literalExpectation(\"=\", false),\n      peg$c39 = \">\",\n      peg$c40 = peg$literalExpectation(\">\", false),\n      peg$c41 = \"?\",\n      peg$c42 = peg$literalExpectation(\"?\", false),\n      peg$c43 = \"@\",\n      peg$c44 = peg$literalExpectation(\"@\", false),\n      peg$c45 = \"\\\\\",\n      peg$c46 = peg$literalExpectation(\"\\\\\", false),\n      peg$c47 = \"^\",\n      peg$c48 = peg$literalExpectation(\"^\", false),\n      peg$c49 = \"_\",\n      peg$c50 = peg$literalExpectation(\"_\", false),\n      peg$c51 = \"{\",\n      peg$c52 = peg$literalExpectation(\"{\", false),\n      peg$c53 = \"|\",\n      peg$c54 = peg$literalExpectation(\"|\", false),\n      peg$c55 = \"}\",\n      peg$c56 = peg$literalExpectation(\"}\", false),\n      peg$c57 = \"~\",\n      peg$c58 = peg$literalExpectation(\"~\", false),\n      peg$c59 = function(t) {return t.join('')},\n      peg$c60 = /^[a-z]/,\n      peg$c61 = peg$classExpectation([[\"a\", \"z\"]], false, false),\n      peg$c62 = /^[a-z0-9]/,\n      peg$c63 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"]], false, false),\n      peg$c64 = \":\",\n      peg$c65 = peg$literalExpectation(\":\", false),\n      peg$c66 = function(a, b, d, e) {return ':' + d + e.join('')},\n      peg$c67 = function(a, b, c) {return a + b.join('') + c.join('')},\n      peg$c68 = \"\",\n      peg$c69 = \".\",\n      peg$c70 = peg$literalExpectation(\".\", false),\n      peg$c71 = \"]\",\n      peg$c72 = peg$literalExpectation(\"]\", false),\n      peg$c73 = function(a, b) {return (bstack[bstack.length - 1] || 0) == a.length + 1},\n      peg$c74 = function(a, b) {return a.join('') + b},\n      peg$c75 = function() {return ''},\n      peg$c76 = function(a) {bstack.pop(); return a},\n      peg$c77 = peg$anyExpectation(),\n      peg$c78 = \"`\",\n      peg$c79 = peg$literalExpectation(\"`\", false),\n      peg$c80 = function(b) {return b},\n      peg$c81 = function(a) {return {\r\n      \t\ttype: 'text',\r\n      \t\ttext: a.join(''),\r\n      \t\tlocation: location()\r\n      \t}},\n      peg$c82 = function(lvm, separator, child, rvm) {\r\n      \t\treturn {\r\n      \t\t\ttype: 'verbatim',\r\n      \t\t\tlvm,\r\n      \t\t\tseparator,\r\n      \t\t\tchild,\r\n      \t\t\trvm,\r\n      \t\t\tlocation: location()\r\n      \t\t}\r\n      \t},\n      peg$c83 = function(a, b) {vlevel = b.length + 1; return a + b.join('')},\n      peg$c84 = function(a, b) {return vlevel == a.length + 1},\n      peg$c85 = function(a) {\r\n      \t\treturn {\r\n      \t\t\ttype: 'text',\r\n      \t\t\ttext: a.join(''),\r\n      \t\t\tlocation: location()\r\n      \t\t}\r\n      \t},\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsethings();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c0(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsethings() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsething();\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsething();\n    }\n\n    return s0;\n  }\n\n  function peg$parsething() {\n    var s0;\n\n    s0 = peg$parseelement();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseverbatim();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsetext();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseelement() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parselbm_push();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetag_name();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseseparator();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsethings();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parserbm_pop();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1(s1, s2, s3, s4, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselbm() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c2;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (input.charCodeAt(peg$currPos) === 60) {\n        s3 = peg$c4;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c5); }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (input.charCodeAt(peg$currPos) === 60) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s3 = peg$c6(s1, s2);\n        if (s3) {\n          s3 = void 0;\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c7(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselbm_push() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parselbm();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c8(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetag_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (input.charCodeAt(peg$currPos) === 33) {\n      s2 = peg$c9;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (input.charCodeAt(peg$currPos) === 33) {\n          s2 = peg$c9;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = [];\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s2 = peg$c11;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s2 = peg$c11;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c12); }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = [];\n        if (input.charCodeAt(peg$currPos) === 35) {\n          s2 = peg$c13;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (input.charCodeAt(peg$currPos) === 35) {\n              s2 = peg$c13;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = [];\n          if (input.charCodeAt(peg$currPos) === 36) {\n            s2 = peg$c15;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c16); }\n          }\n          if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n              s1.push(s2);\n              if (input.charCodeAt(peg$currPos) === 36) {\n                s2 = peg$c15;\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c16); }\n              }\n            }\n          } else {\n            s1 = peg$FAILED;\n          }\n          if (s1 === peg$FAILED) {\n            s1 = [];\n            if (input.charCodeAt(peg$currPos) === 37) {\n              s2 = peg$c17;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c18); }\n            }\n            if (s2 !== peg$FAILED) {\n              while (s2 !== peg$FAILED) {\n                s1.push(s2);\n                if (input.charCodeAt(peg$currPos) === 37) {\n                  s2 = peg$c17;\n                  peg$currPos++;\n                } else {\n                  s2 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c18); }\n                }\n              }\n            } else {\n              s1 = peg$FAILED;\n            }\n            if (s1 === peg$FAILED) {\n              s1 = [];\n              if (input.charCodeAt(peg$currPos) === 38) {\n                s2 = peg$c19;\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c20); }\n              }\n              if (s2 !== peg$FAILED) {\n                while (s2 !== peg$FAILED) {\n                  s1.push(s2);\n                  if (input.charCodeAt(peg$currPos) === 38) {\n                    s2 = peg$c19;\n                    peg$currPos++;\n                  } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c20); }\n                  }\n                }\n              } else {\n                s1 = peg$FAILED;\n              }\n              if (s1 === peg$FAILED) {\n                s1 = [];\n                if (input.charCodeAt(peg$currPos) === 39) {\n                  s2 = peg$c21;\n                  peg$currPos++;\n                } else {\n                  s2 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c22); }\n                }\n                if (s2 !== peg$FAILED) {\n                  while (s2 !== peg$FAILED) {\n                    s1.push(s2);\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                      s2 = peg$c21;\n                      peg$currPos++;\n                    } else {\n                      s2 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n                    }\n                  }\n                } else {\n                  s1 = peg$FAILED;\n                }\n                if (s1 === peg$FAILED) {\n                  s1 = [];\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s2 = peg$c23;\n                    peg$currPos++;\n                  } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                  }\n                  if (s2 !== peg$FAILED) {\n                    while (s2 !== peg$FAILED) {\n                      s1.push(s2);\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s2 = peg$c23;\n                        peg$currPos++;\n                      } else {\n                        s2 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                      }\n                    }\n                  } else {\n                    s1 = peg$FAILED;\n                  }\n                  if (s1 === peg$FAILED) {\n                    s1 = [];\n                    if (input.charCodeAt(peg$currPos) === 42) {\n                      s2 = peg$c25;\n                      peg$currPos++;\n                    } else {\n                      s2 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c26); }\n                    }\n                    if (s2 !== peg$FAILED) {\n                      while (s2 !== peg$FAILED) {\n                        s1.push(s2);\n                        if (input.charCodeAt(peg$currPos) === 42) {\n                          s2 = peg$c25;\n                          peg$currPos++;\n                        } else {\n                          s2 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c26); }\n                        }\n                      }\n                    } else {\n                      s1 = peg$FAILED;\n                    }\n                    if (s1 === peg$FAILED) {\n                      s1 = [];\n                      if (input.charCodeAt(peg$currPos) === 43) {\n                        s2 = peg$c27;\n                        peg$currPos++;\n                      } else {\n                        s2 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                      }\n                      if (s2 !== peg$FAILED) {\n                        while (s2 !== peg$FAILED) {\n                          s1.push(s2);\n                          if (input.charCodeAt(peg$currPos) === 43) {\n                            s2 = peg$c27;\n                            peg$currPos++;\n                          } else {\n                            s2 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                          }\n                        }\n                      } else {\n                        s1 = peg$FAILED;\n                      }\n                      if (s1 === peg$FAILED) {\n                        s1 = [];\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s2 = peg$c29;\n                          peg$currPos++;\n                        } else {\n                          s2 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                        }\n                        if (s2 !== peg$FAILED) {\n                          while (s2 !== peg$FAILED) {\n                            s1.push(s2);\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s2 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s2 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                          }\n                        } else {\n                          s1 = peg$FAILED;\n                        }\n                        if (s1 === peg$FAILED) {\n                          s1 = [];\n                          if (input.charCodeAt(peg$currPos) === 45) {\n                            s2 = peg$c31;\n                            peg$currPos++;\n                          } else {\n                            s2 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n                          }\n                          if (s2 !== peg$FAILED) {\n                            while (s2 !== peg$FAILED) {\n                              s1.push(s2);\n                              if (input.charCodeAt(peg$currPos) === 45) {\n                                s2 = peg$c31;\n                                peg$currPos++;\n                              } else {\n                                s2 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c32); }\n                              }\n                            }\n                          } else {\n                            s1 = peg$FAILED;\n                          }\n                          if (s1 === peg$FAILED) {\n                            s1 = [];\n                            if (input.charCodeAt(peg$currPos) === 47) {\n                              s2 = peg$c33;\n                              peg$currPos++;\n                            } else {\n                              s2 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                            }\n                            if (s2 !== peg$FAILED) {\n                              while (s2 !== peg$FAILED) {\n                                s1.push(s2);\n                                if (input.charCodeAt(peg$currPos) === 47) {\n                                  s2 = peg$c33;\n                                  peg$currPos++;\n                                } else {\n                                  s2 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                                }\n                              }\n                            } else {\n                              s1 = peg$FAILED;\n                            }\n                            if (s1 === peg$FAILED) {\n                              s1 = [];\n                              if (input.charCodeAt(peg$currPos) === 59) {\n                                s2 = peg$c35;\n                                peg$currPos++;\n                              } else {\n                                s2 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                              }\n                              if (s2 !== peg$FAILED) {\n                                while (s2 !== peg$FAILED) {\n                                  s1.push(s2);\n                                  if (input.charCodeAt(peg$currPos) === 59) {\n                                    s2 = peg$c35;\n                                    peg$currPos++;\n                                  } else {\n                                    s2 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                                  }\n                                }\n                              } else {\n                                s1 = peg$FAILED;\n                              }\n                              if (s1 === peg$FAILED) {\n                                s1 = [];\n                                if (input.charCodeAt(peg$currPos) === 61) {\n                                  s2 = peg$c37;\n                                  peg$currPos++;\n                                } else {\n                                  s2 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                                }\n                                if (s2 !== peg$FAILED) {\n                                  while (s2 !== peg$FAILED) {\n                                    s1.push(s2);\n                                    if (input.charCodeAt(peg$currPos) === 61) {\n                                      s2 = peg$c37;\n                                      peg$currPos++;\n                                    } else {\n                                      s2 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                                    }\n                                  }\n                                } else {\n                                  s1 = peg$FAILED;\n                                }\n                                if (s1 === peg$FAILED) {\n                                  s1 = [];\n                                  if (input.charCodeAt(peg$currPos) === 62) {\n                                    s2 = peg$c39;\n                                    peg$currPos++;\n                                  } else {\n                                    s2 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c40); }\n                                  }\n                                  if (s2 !== peg$FAILED) {\n                                    while (s2 !== peg$FAILED) {\n                                      s1.push(s2);\n                                      if (input.charCodeAt(peg$currPos) === 62) {\n                                        s2 = peg$c39;\n                                        peg$currPos++;\n                                      } else {\n                                        s2 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c40); }\n                                      }\n                                    }\n                                  } else {\n                                    s1 = peg$FAILED;\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    s1 = [];\n                                    if (input.charCodeAt(peg$currPos) === 63) {\n                                      s2 = peg$c41;\n                                      peg$currPos++;\n                                    } else {\n                                      s2 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c42); }\n                                    }\n                                    if (s2 !== peg$FAILED) {\n                                      while (s2 !== peg$FAILED) {\n                                        s1.push(s2);\n                                        if (input.charCodeAt(peg$currPos) === 63) {\n                                          s2 = peg$c41;\n                                          peg$currPos++;\n                                        } else {\n                                          s2 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c42); }\n                                        }\n                                      }\n                                    } else {\n                                      s1 = peg$FAILED;\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      s1 = [];\n                                      if (input.charCodeAt(peg$currPos) === 64) {\n                                        s2 = peg$c43;\n                                        peg$currPos++;\n                                      } else {\n                                        s2 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c44); }\n                                      }\n                                      if (s2 !== peg$FAILED) {\n                                        while (s2 !== peg$FAILED) {\n                                          s1.push(s2);\n                                          if (input.charCodeAt(peg$currPos) === 64) {\n                                            s2 = peg$c43;\n                                            peg$currPos++;\n                                          } else {\n                                            s2 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c44); }\n                                          }\n                                        }\n                                      } else {\n                                        s1 = peg$FAILED;\n                                      }\n                                      if (s1 === peg$FAILED) {\n                                        s1 = [];\n                                        if (input.charCodeAt(peg$currPos) === 92) {\n                                          s2 = peg$c45;\n                                          peg$currPos++;\n                                        } else {\n                                          s2 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n                                        }\n                                        if (s2 !== peg$FAILED) {\n                                          while (s2 !== peg$FAILED) {\n                                            s1.push(s2);\n                                            if (input.charCodeAt(peg$currPos) === 92) {\n                                              s2 = peg$c45;\n                                              peg$currPos++;\n                                            } else {\n                                              s2 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c46); }\n                                            }\n                                          }\n                                        } else {\n                                          s1 = peg$FAILED;\n                                        }\n                                        if (s1 === peg$FAILED) {\n                                          s1 = [];\n                                          if (input.charCodeAt(peg$currPos) === 94) {\n                                            s2 = peg$c47;\n                                            peg$currPos++;\n                                          } else {\n                                            s2 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c48); }\n                                          }\n                                          if (s2 !== peg$FAILED) {\n                                            while (s2 !== peg$FAILED) {\n                                              s1.push(s2);\n                                              if (input.charCodeAt(peg$currPos) === 94) {\n                                                s2 = peg$c47;\n                                                peg$currPos++;\n                                              } else {\n                                                s2 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c48); }\n                                              }\n                                            }\n                                          } else {\n                                            s1 = peg$FAILED;\n                                          }\n                                          if (s1 === peg$FAILED) {\n                                            s1 = [];\n                                            if (input.charCodeAt(peg$currPos) === 95) {\n                                              s2 = peg$c49;\n                                              peg$currPos++;\n                                            } else {\n                                              s2 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c50); }\n                                            }\n                                            if (s2 !== peg$FAILED) {\n                                              while (s2 !== peg$FAILED) {\n                                                s1.push(s2);\n                                                if (input.charCodeAt(peg$currPos) === 95) {\n                                                  s2 = peg$c49;\n                                                  peg$currPos++;\n                                                } else {\n                                                  s2 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c50); }\n                                                }\n                                              }\n                                            } else {\n                                              s1 = peg$FAILED;\n                                            }\n                                            if (s1 === peg$FAILED) {\n                                              s1 = [];\n                                              if (input.charCodeAt(peg$currPos) === 123) {\n                                                s2 = peg$c51;\n                                                peg$currPos++;\n                                              } else {\n                                                s2 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c52); }\n                                              }\n                                              if (s2 !== peg$FAILED) {\n                                                while (s2 !== peg$FAILED) {\n                                                  s1.push(s2);\n                                                  if (input.charCodeAt(peg$currPos) === 123) {\n                                                    s2 = peg$c51;\n                                                    peg$currPos++;\n                                                  } else {\n                                                    s2 = peg$FAILED;\n                                                    if (peg$silentFails === 0) { peg$fail(peg$c52); }\n                                                  }\n                                                }\n                                              } else {\n                                                s1 = peg$FAILED;\n                                              }\n                                              if (s1 === peg$FAILED) {\n                                                s1 = [];\n                                                if (input.charCodeAt(peg$currPos) === 124) {\n                                                  s2 = peg$c53;\n                                                  peg$currPos++;\n                                                } else {\n                                                  s2 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c54); }\n                                                }\n                                                if (s2 !== peg$FAILED) {\n                                                  while (s2 !== peg$FAILED) {\n                                                    s1.push(s2);\n                                                    if (input.charCodeAt(peg$currPos) === 124) {\n                                                      s2 = peg$c53;\n                                                      peg$currPos++;\n                                                    } else {\n                                                      s2 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c54); }\n                                                    }\n                                                  }\n                                                } else {\n                                                  s1 = peg$FAILED;\n                                                }\n                                                if (s1 === peg$FAILED) {\n                                                  s1 = [];\n                                                  if (input.charCodeAt(peg$currPos) === 125) {\n                                                    s2 = peg$c55;\n                                                    peg$currPos++;\n                                                  } else {\n                                                    s2 = peg$FAILED;\n                                                    if (peg$silentFails === 0) { peg$fail(peg$c56); }\n                                                  }\n                                                  if (s2 !== peg$FAILED) {\n                                                    while (s2 !== peg$FAILED) {\n                                                      s1.push(s2);\n                                                      if (input.charCodeAt(peg$currPos) === 125) {\n                                                        s2 = peg$c55;\n                                                        peg$currPos++;\n                                                      } else {\n                                                        s2 = peg$FAILED;\n                                                        if (peg$silentFails === 0) { peg$fail(peg$c56); }\n                                                      }\n                                                    }\n                                                  } else {\n                                                    s1 = peg$FAILED;\n                                                  }\n                                                  if (s1 === peg$FAILED) {\n                                                    s1 = [];\n                                                    if (input.charCodeAt(peg$currPos) === 126) {\n                                                      s2 = peg$c57;\n                                                      peg$currPos++;\n                                                    } else {\n                                                      s2 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c58); }\n                                                    }\n                                                    if (s2 !== peg$FAILED) {\n                                                      while (s2 !== peg$FAILED) {\n                                                        s1.push(s2);\n                                                        if (input.charCodeAt(peg$currPos) === 126) {\n                                                          s2 = peg$c57;\n                                                          peg$currPos++;\n                                                        } else {\n                                                          s2 = peg$FAILED;\n                                                          if (peg$silentFails === 0) { peg$fail(peg$c58); }\n                                                        }\n                                                      }\n                                                    } else {\n                                                      s1 = peg$FAILED;\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c59(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (peg$c60.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c61); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c62.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c63); }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c62.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c63); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s5 = peg$c64;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n          if (s5 !== peg$FAILED) {\n            if (peg$c60.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c61); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = [];\n              if (peg$c62.test(input.charAt(peg$currPos))) {\n                s8 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c63); }\n              }\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                if (peg$c62.test(input.charAt(peg$currPos))) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c63); }\n                }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c66(s1, s2, s6, s7);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 58) {\n              s5 = peg$c64;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c65); }\n            }\n            if (s5 !== peg$FAILED) {\n              if (peg$c60.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c61); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                if (peg$c62.test(input.charAt(peg$currPos))) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c63); }\n                }\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  if (peg$c62.test(input.charAt(peg$currPos))) {\n                    s8 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c63); }\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s4;\n                  s5 = peg$c66(s1, s2, s6, s7);\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c67(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$c68;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseseparator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c69;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c70); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$c68;\n    }\n\n    return s0;\n  }\n\n  function peg$parserbm() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s2 = peg$c39;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c40); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s2 = peg$c39;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c40); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 93) {\n        s2 = peg$c71;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c72); }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s3 = peg$c73(s1, s2);\n        if (s3) {\n          s3 = void 0;\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c74(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseEOF();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c75();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parserbm_pop() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parserbm();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c76(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c77); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetext() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    peg$silentFails++;\n    s4 = peg$parselbm();\n    peg$silentFails--;\n    if (s4 === peg$FAILED) {\n      s3 = void 0;\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parserbm();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s6 = peg$c78;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c79); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c77); }\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s2;\n            s3 = peg$c80(s6);\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parselbm();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parserbm();\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = void 0;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 96) {\n              s6 = peg$c78;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c79); }\n            }\n            peg$silentFails--;\n            if (s6 === peg$FAILED) {\n              s5 = void 0;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c77); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s2;\n                s3 = peg$c80(s6);\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c81(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseverbatim() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parselvm();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseseparator();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseverbatim_text();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parservm();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c82(s1, s2, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselvm() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c78;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c79); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (input.charCodeAt(peg$currPos) === 60) {\n        s3 = peg$c4;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c5); }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (input.charCodeAt(peg$currPos) === 60) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c83(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parservm() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s2 = peg$c39;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c40); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s2 = peg$c39;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c40); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 96) {\n        s2 = peg$c78;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c79); }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s3 = peg$c84(s1, s2);\n        if (s3) {\n          s3 = void 0;\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c74(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseEOF();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c75();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseverbatim_text() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$currPos;\n    peg$silentFails++;\n    s4 = peg$parservm();\n    peg$silentFails--;\n    if (s4 === peg$FAILED) {\n      s3 = void 0;\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n    if (s3 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s4 !== peg$FAILED) {\n        peg$savedPos = s2;\n        s3 = peg$c80(s4);\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      s3 = peg$currPos;\n      peg$silentFails++;\n      s4 = peg$parservm();\n      peg$silentFails--;\n      if (s4 === peg$FAILED) {\n        s3 = void 0;\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c77); }\n        }\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c80(s4);\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c85(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n\r\n  \tvar bstack = [], vlevel;\r\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n\n\n//# sourceURL=webpack://m42kup/./dist/peg.js?");

/***/ }),

/***/ "./src/cascade.js":
/*!************************!*\
  !*** ./src/cascade.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function shallow(o) {\r\n\tvar o2 = {};\r\n\r\n\tfor (var k in o) o2[k] = o[k];\r\n\r\n\treturn o2;\r\n}\r\n\r\nfunction copyOptions(o) {\r\n\tvar o2 = {};\r\n\tif (o.tags) o2.tags = shallow(o.tags);\r\n\tif (o.hljs) o2.hljs = o.hljs;\r\n\tif (o.katex) o2.katex = o.katex;\r\n\treturn o2;\r\n}\r\n\r\nfunction tags(o1, o2) {\r\n\to1 = shallow(o1);\r\n\t\r\n\tfor (var k in o2) {\r\n\t\to1[k] = o2[k];\r\n\t}\r\n\r\n\treturn o1;\r\n}\r\n\r\nfunction options(o1, o2) {\r\n\tif (typeof o1 != 'object'\r\n\t\t\t|| typeof o2 != 'object') {\r\n\t\tthrow TypeError('One of the options provided is not an object');\r\n\t}\r\n\r\n\to1 = copyOptions(o1);\r\n\t\r\n\tif (o2.tags) {\r\n\t\tif (!o1.tags) {\r\n\t\t\to1.tags = {};\r\n\t\t}\r\n\t\t\r\n\t\to1.tags = tags(o1.tags, o2.tags);\r\n\t}\r\n\r\n\tif (o2.hljs) o1.hljs = o2.hljs;\r\n\tif (o2.katex) o1.katex = o2.katex;\r\n\r\n\treturn o1;\r\n}\r\n\r\nmodule.exports = {\r\n\tcopyOptions,\r\n\ttags,\r\n\toptions\r\n};\r\n\n\n//# sourceURL=webpack://m42kup/./src/cascade.js?");

/***/ }),

/***/ "./src/highlighter.js":
/*!****************************!*\
  !*** ./src/highlighter.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var escapeHtml = s => (s + '').replace(/[&<>\"']/g, m => ({\r\n\t'&': '&amp;', '<': '&lt;', '>': '&gt;',\r\n\t'\"': '&quot;', \"'\": '&#39;'\r\n})[m]);\r\n\r\nfunction makeHtml(fragment) {\r\n\treturn `<span class=\"m42kup-hl-${fragment.type}\">${fragment.html || escapeHtml(fragment.text)}</span>`;\r\n}\r\n\r\nfunction pt2hl(pt) {\r\n\treturn (function recurse(pt) {\r\n\t\tvar ret = '';\r\n\r\n\t\tfor (var i = 0; i < pt.length; i++) {\r\n\t\t\tswitch(pt[i].type) {\r\n\t\t\t\tcase 'text':\r\n\t\t\t\t\tret += makeHtml({\r\n\t\t\t\t\t\ttype: 'tx',\r\n\t\t\t\t\t\ttext: pt[i].text\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'element':\r\n\t\t\t\t\tvar tmp = makeHtml({\r\n\t\t\t\t\t\ttype: 'lbm',\r\n\t\t\t\t\t\ttext: pt[i].lbm\r\n\t\t\t\t\t})\r\n\t\t\t\t\t\t+ makeHtml({\r\n\t\t\t\t\t\ttype: 'tn',\r\n\t\t\t\t\t\ttext: pt[i].name\r\n\t\t\t\t\t})\r\n\t\t\t\t\t\t+ makeHtml({\r\n\t\t\t\t\t\ttype: 'sp',\r\n\t\t\t\t\t\ttext: pt[i].separator\r\n\t\t\t\t\t})\r\n\t\t\t\t\t\t+ recurse(pt[i].children)\r\n\t\t\t\t\t\t+ makeHtml({\r\n\t\t\t\t\t\ttype: 'rbm',\r\n\t\t\t\t\t\ttext: pt[i].rbm\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tret += makeHtml({\r\n\t\t\t\t\t\ttype: 'elem',\r\n\t\t\t\t\t\thtml: tmp\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'verbatim':\r\n\t\t\t\t\tvar tmp = makeHtml({\r\n\t\t\t\t\t\ttype: 'lvm',\r\n\t\t\t\t\t\ttext: pt[i].lvm + pt[i].separator\r\n\t\t\t\t\t})\r\n\t\t\t\t\t\t+ makeHtml({\r\n\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t\ttext: pt[i].child.text\r\n\t\t\t\t\t})\r\n\t\t\t\t\t\t+ makeHtml({\r\n\t\t\t\t\t\ttype: 'rvm',\r\n\t\t\t\t\t\ttext: pt[i].rvm\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tret += makeHtml({\r\n\t\t\t\t\t\ttype: 'verb',\r\n\t\t\t\t\t\thtml: tmp\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new TypeError(`Unknown type: ${pt[i].type}`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t})(pt.root.children);\r\n}\r\n\r\nmodule.exports = {\r\n\tpt2hl\r\n};\n\n//# sourceURL=webpack://m42kup/./src/highlighter.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var parser = __webpack_require__(/*! ./parser */ \"./src/parser.js\");\r\nvar renderer = __webpack_require__(/*! ./renderer */ \"./src/renderer/index.js\");\r\nvar highlighter = __webpack_require__(/*! ./highlighter */ \"./src/highlighter.js\");\r\nvar cascade = __webpack_require__(/*! ./cascade */ \"./src/cascade.js\");\r\n\r\nvar globalOptions = {};\r\n\r\nfunction cascadeOptions(options) {\r\n\tif (typeof options != 'object')\r\n\t\tthrow TypeError('typeof options != \\'object\\'');\r\n\tglobalOptions = cascade.options(globalOptions, options);\r\n}\r\n\r\nfunction setOptions(options) {\r\n\tif (typeof options != 'object')\r\n\t\tthrow TypeError('typeof options != \\'object\\'');\r\n\tglobalOptions = options;\r\n}\r\n\r\nfunction ast2nt(ast, options) {\r\n\tif (!options) options = {};\r\n\tif (!options.tags) options.tags = {};\r\n\r\n\toptions = cascade.options(globalOptions, options);\r\n\r\n\tvar nt = renderer.ast2nt(ast, options);\r\n\r\n\treturn nt;\r\n}\r\n\r\nfunction render(input, options) {\r\n\tinput += '';\r\n\tif (!options) options = {};\r\n\tif (!options.tags) options.tags = {};\r\n\t\r\n\toptions = cascade.options(globalOptions, options);\r\n\r\n\tvar pt = parser.input2pt(input);\r\n\tvar ast = parser.pt2ast(pt);\r\n\tvar html = renderer.ast2nt(ast, options).outerHtml;\r\n\t\r\n\treturn html;\r\n}\r\n\r\nfunction highlight(input) {\r\n\tinput += '';\r\n\r\n\tvar pt = parser.input2pt(input);\r\n\tvar hl = highlighter.pt2hl(pt);\r\n\r\n\treturn hl;\r\n}\r\n\r\nvar m42kup = {\r\n\tparser,\r\n\trenderer,\r\n\thighlighter,\r\n\tast2nt,\r\n\trender,\r\n\thighlight,\r\n\tcascade: cascadeOptions,\r\n\tset: setOptions\r\n};\r\n\r\nmodule.exports = m42kup;\r\n\n\n//# sourceURL=webpack://m42kup/./src/index.js?");

/***/ }),

/***/ "./src/parser.js":
/*!***********************!*\
  !*** ./src/parser.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var peg = __webpack_require__(/*! ../dist/peg */ \"./dist/peg.js\");\r\n\r\nfunction input2pt(input) {\r\n\tvar pt = peg.parse(input);\r\n\tpt.input = input;\r\n\t\r\n\treturn pt;\r\n}\r\n\r\nfunction pt2ast(pt) {\r\n\tvar input = pt.input;\r\n\r\n\tvar r = (function recurse(pt) {\r\n\t\tvar ast = pt.map(e => {\r\n\t\t\tswitch (e.type) {\r\n\t\t\t\tcase 'text':\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t\ttext: e.text\r\n\t\t\t\t\t};\r\n\t\t\t\tcase 'verbatim':\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: 'text',\r\n\t\t\t\t\t\ttext: e.child.text\r\n\t\t\t\t\t};\r\n\t\t\t\tcase 'element':\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: 'element',\r\n\t\t\t\t\t\tname: e.name,\r\n\t\t\t\t\t\tcode: input.substring(e.location.start.offset, e.location.end.offset),\r\n\t\t\t\t\t\tchildren: recurse(e.children)\r\n\t\t\t\t\t};\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new TypeError(`Unknown type: ${e.type}`);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\t// join text nodes & remove empty\r\n\t\t.reduce((l, r, i) => {\r\n\t\t\tif (r.type == 'text') {\r\n\t\t\t\tif (!r.text) return l;\r\n\t\t\t\tif (i > 0 && l[l.length - 1].type == 'text')\r\n\t\t\t\t\treturn l[l.length - 1].text += r.text, l;\r\n\t\t\t}\r\n\r\n\t\t\treturn l.push(r), l;\r\n\t\t}, []);\r\n\r\n\t\treturn ast;\r\n\t})(pt.root.children);\r\n\r\n\treturn {\r\n\t\tinput: pt.input,\r\n\t\troot: {\r\n\t\t\ttype: 'root',\r\n\t\t\tchildren: r,\r\n\t\t\tcode: input.substring(pt.root.location.start.offset, pt.root.location.end.offset),\r\n\t\t\tlocation: pt.root.location\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = {\r\n\tinput2pt,\r\n\tpt2ast\r\n};\n\n//# sourceURL=webpack://m42kup/./src/parser.js?");

/***/ }),

/***/ "./src/renderer/classes.js":
/*!*********************************!*\
  !*** ./src/renderer/classes.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var {TextNode, HtmlNode, ErrorNode, ElementClass, Element} = __webpack_require__(/*! ./nodes */ \"./src/renderer/nodes.js\");\r\n\r\nvar Root = new ElementClass({\r\n\tname: '[root]',\r\n\tdisplay: 'container-block',\r\n\trender: el => el.html(el.innerHtml)\r\n});\r\n\r\nvar classMap = {};\r\n\r\nclassMap.comment = new ElementClass({\r\n\tname: 'comment',\r\n\tdisplay: 'inline',\r\n\trender: el => el.text('')\r\n});\r\n\r\nclassMap.entity = new ElementClass({\r\n\tname: 'entity',\r\n\tdisplay: 'inline',\r\n\trender: el => {\r\n\t\tif (!el.innerIsText)\r\n\t\t\treturn el.error('Non-text input');\r\n\r\n\t\tif(!/^([a-z]{1,50}|#[0-9]{1,10}|#x[0-9a-f]{1,10})$/i.test(el.innerText))\r\n\t\t\treturn el.error('Invalid value');\r\n\r\n\t\treturn el.html(`&${el.innerText};`);\r\n\t}\r\n});\r\n\r\n[\r\n\t'b', 'code', 'i', 'u', 'sup', 'sub'\r\n].forEach(name => classMap[name] = new ElementClass({\r\n\tname: name,\r\n\tdisplay: 'inline',\r\n\trender: el => {\r\n\t\treturn el.html(`<${name}>${el.innerHtml}</${name}>`);\r\n\t}\r\n}));\r\n\r\n[\r\n\t'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p'\r\n].forEach(name => classMap[name] = new ElementClass({\r\n\tname: name,\r\n\tdisplay: 'leaf-block',\r\n\trender: el => {\r\n\t\treturn el.html(`<${name}>${el.innerHtml}</${name}>`);\r\n\t}\r\n}));\r\n\r\n[\r\n\t'blockquote'\r\n].forEach(name => classMap[name] = new ElementClass({\r\n\tname,\r\n\tdisplay: 'container-block',\r\n\trender: el => {\r\n\t\treturn el.html(`<${name}>${el.innerHtml}</${name}>`);\r\n\t}\r\n}));\r\n\r\n[\r\n\t'br'\r\n].forEach(name => classMap[name] = new ElementClass({\r\n\tname,\r\n\tdisplay: 'inline',\r\n\trender: el => {\r\n\t\treturn el.html(`<${name}>${el.innerHtml}`);\r\n\t}\r\n}));\r\n\r\n[\r\n\t'hr'\r\n].forEach(name => classMap[name] = new ElementClass({\r\n\tname,\r\n\tdisplay: 'leaf-block',\r\n\trender: el => {\r\n\t\treturn el.html(`<${name}>${el.innerHtml}`);\r\n\t}\r\n}));\r\n\r\n['ul', 'ol'].forEach(name => {\r\n\tclassMap[name] = new ElementClass({\r\n\t\tname,\r\n\t\tdisplay: 'container-block',\r\n\t\tsplit: '*',\r\n\t\trender: el => {\r\n\t\t\treturn el.html(`<${name}>`\r\n\t\t\t\t+ el.innerHtml.map(h => `<li>${h}</li>`).join('')\r\n\t\t\t\t+ `</${name}>`);\r\n\t\t}\r\n\t});\r\n});\r\n\r\nclassMap.table = new ElementClass({\r\n\tname: 'table',\r\n\tdisplay: 'container-block',\r\n\tsplit: ['*', '**'],\r\n\trender: el => {\r\n\t\treturn el.html('<table>'\r\n\t\t\t+ el.innerHtml.map(hh => '<tr>'\r\n\t\t\t\t+ hh.map(h => `<td>${h}</td>`).join('')\r\n\t\t\t\t+ '</tr>').join('')\r\n\t\t\t+ '</table>')\r\n\t}\r\n})\r\n\r\nclassMap.blockcode = new ElementClass({\r\n\tname: 'blockcode',\r\n\tdisplay: 'leaf-block',\r\n\trender: el => {\r\n\t\tvar trimmed = el.innerHtml.replace(/(^[ \\t]*(\\r\\n|\\r|\\n))|((\\r\\n|\\r|\\n)[ \\t]*$)/g, '');\r\n\t\treturn el.html(`<pre><code>${trimmed}\\n</code></pre>`);\r\n\t}\r\n});\r\n\r\nclassMap.bi = new ElementClass({\r\n\tname: 'bi',\r\n\tdisplay: 'inline',\r\n\trender: el => {\r\n\t\treturn el.html(`<i><b>${el.innerHtml}</b></i>`);\r\n\t}\r\n});\r\n\r\nfunction normalizeUrl(url) {\r\n\turl = url.trim();\r\n\r\n\t// fragment\r\n\tif (/^\\#/.test(url)) {\r\n\t\tif (/^\\#[^\\s]*$/.test(url)) {\r\n\t\t\treturn url;\r\n\t\t} else return false;\r\n\t}\r\n\r\n\t// relative URL\r\n\tif (/^(\\/|\\.\\/|\\.\\.\\/)/.test(url)) {\r\n\t\tif (/^(\\/|\\.\\/|\\.\\.\\/)[^\\s]*$/.test(url)) {\r\n\t\t\treturn url;\r\n\t\t} else return false;\r\n\t}\r\n\r\n\tif (!/^(http:\\/\\/|https:\\/\\/|ftp:\\/\\/)/.test(url))\r\n\t\turl = 'http://' + url;\r\n\r\n\t// see issue #17\r\n\tif (/^(http:\\/\\/|https:\\/\\/|ftp:\\/\\/)[a-z0-9]+(-+[a-z0-9]+)*(\\.[a-z0-9]+(-+[a-z0-9]+)*)+\\.?(:[0-9]{1,5})?(\\/[^\\s]*)?$/.test(url)) {\r\n\t\treturn url;\r\n\t} else return false;\r\n}\r\n\r\nclassMap.link = new ElementClass({\r\n\tname: 'link',\r\n\tdisplay: 'inline',\r\n\trender: el => {\r\n\t\tif (!el.innerIsText)\r\n\t\t\treturn el.error('Non-text input');\r\n\r\n\t\tvar url = normalizeUrl(el.innerText);\r\n\t\tif (!url) return el.error('Invalid URL');\r\n\r\n\t\tvar htmlUrl = el.escapeHtml(url);\r\n\t\treturn el.html(`<a href=\"${htmlUrl}\">${htmlUrl}</a>`);\r\n\t}\r\n});\r\n\r\nclassMap.img = new ElementClass({\r\n\tname: 'img',\r\n\tdisplay: 'leaf-block',\r\n\trender: el => {\r\n\t\tif (!el.innerIsText)\r\n\t\t\treturn el.error('Non-text input');\r\n\r\n\t\tvar url = normalizeUrl(el.innerText);\r\n\t\tif (!url) return el.error('Invalid URL');\r\n\r\n\t\tvar htmlUrl = el.escapeHtml(url);\r\n\t\treturn el.html(`<div class=\"m42kup-img-block\"><img src=\"${htmlUrl}\"></div>`);\r\n\t}\r\n});\r\n\r\n[\r\n\t'squote', 'dquote'\r\n].forEach(name => classMap[name] = new ElementClass({\r\n\tname,\r\n\tdisplay: 'inline',\r\n\trender: el => {\r\n\t\tvar quotes = {\r\n\t\t\t'squote': ['\\u2018', '\\u2019'],\r\n\t\t\t'dquote': ['\\u201c', '\\u201d']\r\n\t\t};\r\n\r\n\t\treturn el.html(`${quotes[name][0]}${el.innerHtml}${quotes[name][1]}`);\r\n\t}\r\n}));\r\n\r\nclassMap.highlight = new ElementClass({\r\n\tname: 'highlight',\r\n\tdisplay: 'leaf-block',\r\n\trender: (el, options) => {\r\n\t\tif (!options.hljs)\r\n\t\t\treturn el.error('Element not implemented (options.highlight not given)');\r\n\r\n\t\tif (!el.innerIsText)\r\n\t\t\treturn el.error('Non-text input');\r\n\r\n\t\tvar commonLangs = [\r\n\t\t\t'apache', 'bash', 'coffeescript', 'cpp', 'cs',\r\n\t\t\t'css', 'diff', 'http', 'ini', 'java',\r\n\t\t\t'javascript', 'json', 'makefile', 'xml', 'markdown',\r\n\t\t\t'nginx', 'objectivec', 'perl', 'php', 'python',\r\n\t\t\t'ruby', 'sql'\r\n\t\t];\r\n\r\n\t\tvar trimmed = el.innerText.replace(/(^[ \\t]*(\\r\\n|\\r|\\n))|((\\r\\n|\\r|\\n)[ \\t]*$)/g, ''),\r\n\t\t\thighlighted = options.hljs.highlightAuto(trimmed, commonLangs).value;\r\n\t\treturn el.html(`<pre class=\"hljs\"><code>${highlighted}\\n</code></pre>`);\r\n\t}\r\n});\r\n \r\nclassMap.math = new ElementClass({\r\n\tname: 'math',\r\n\tdisplay: 'inline',\r\n\trender: (el, options) => {\r\n\t\tif (!options.katex)\r\n\t\t\treturn el.error('Element not implemented (options.katex not given)');\r\n\r\n\t\tif (!el.innerIsText)\r\n\t\t\treturn el.error('Non-text input');\r\n\r\n\t\tvar rendered = options.katex.renderToString(el.innerText, {\r\n\t\t\tthrowOnError: false,\r\n\t\t\tdisplayMode: false,\r\n\t\t\tstrict: 'error'\r\n\t\t});\r\n\r\n\t\treturn el.html(rendered);\r\n\t}\r\n});\r\n\r\nclassMap.displaymath = new ElementClass({\r\n\tname: 'displaymath',\r\n\tdisplay: 'leaf-block',\r\n\trender: (el, options) => {\r\n\t\tif (!options.katex)\r\n\t\t\treturn el.error('Element not implemented (options.katex not given)');\r\n\r\n\t\tif (!el.innerIsText)\r\n\t\t\treturn el.error('Non-text input');\r\n\r\n\t\tvar rendered = options.katex.renderToString(el.innerText, {\r\n\t\t\tthrowOnError: false,\r\n\t\t\tdisplayMode: true,\r\n\t\t\tstrict: 'error'\r\n\t\t});\r\n\r\n\t\treturn el.html(rendered);\r\n\t}\r\n});\r\n\r\n// tag name aliases ordered by char code\r\nvar aliases = {\r\n\t'\"': 'dquote',\r\n\t'$': 'math',\r\n\t'$$': 'displaymath',\r\n\t'%': 'comment',\r\n\t'&': 'entity',\r\n\t\"'\": 'squote',\r\n\t'*': 'i',\r\n\t'**': 'b',\r\n\t'***': 'bi',\r\n\t';': 'code',\r\n\t';;': 'blockcode',\r\n\t';;;': 'highlight',\r\n\t'=': 'h1',\r\n\t'==': 'h2',\r\n\t'===': 'h3',\r\n\t'====': 'h4',\r\n\t'=====': 'h5',\r\n\t'======': 'h6',\r\n\t'>': 'blockquote',\r\n\t'\\\\': 'br',\r\n\t'^': 'sup',\r\n\t'_': 'sub',\r\n\t'~': 'link',\r\n\t'~~': 'img'\r\n};\r\n\r\nfor (var k in aliases) {\r\n\tif (!classMap[aliases[k]]) {\r\n\t\tthrow TypeError(`aliasing failed`);\r\n\t}\r\n\tclassMap[k] = classMap[aliases[k]];\r\n}\r\n\r\nmodule.exports = {\r\n\tRoot,\r\n\tclassMap\r\n};\n\n//# sourceURL=webpack://m42kup/./src/renderer/classes.js?");

/***/ }),

/***/ "./src/renderer/index.js":
/*!*******************************!*\
  !*** ./src/renderer/index.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var {Node, TextNode, HtmlNode, ErrorNode, ElementClass, Element} = __webpack_require__(/*! ./nodes */ \"./src/renderer/nodes.js\");\r\nvar {Root, classMap: defClassMap} = __webpack_require__(/*! ./classes */ \"./src/renderer/classes.js\");\r\nvar cascade = __webpack_require__(/*! ../cascade */ \"./src/cascade.js\");\r\n\r\nfunction ast2nt(ast, options) {\r\n\tif (!options) options = {};\r\n\tif (!options.tags) options.tags = {};\r\n\r\n\tvar classMap = cascade.tags(defClassMap, options.tags);\r\n\t\r\n\tfor (var k in classMap) if (classMap[k] === false) delete classMap[k];\r\n\t\r\n\tvar recurse = (tree, root) => {\r\n\t\tif (tree.type == 'root') {\r\n\t\t\treturn Root.instantiate({\r\n\t\t\t\tcode: tree.code,\r\n\t\t\t\tchildren: tree.children.map(c => recurse(c, false)),\r\n\t\t\t\toptions\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (tree.type == 'text')\r\n\t\t\treturn new TextNode(tree.text);\r\n\t\t\r\n\t\tif (tree.type == 'error')\r\n\t\t\treturn new ErrorNode({\r\n\t\t\t\tmessage: '[error]',\r\n\t\t\t\tcode: tree.text\r\n\t\t\t});\r\n\t\t\r\n\t\tif (tree.type == 'element') {\r\n\t\t\tif (tree.name in classMap) {\r\n\t\t\t\tif (classMap[tree.name].split) {\r\n\t\t\t\t\tvar recurseSplit = (list, split) => {\r\n\t\t\t\t\t\tif (split.length == 0)\r\n\t\t\t\t\t\t\treturn list.map(c => recurse(c, false));\r\n\r\n\t\t\t\t\t\tvar s = split[split.length - 1];\r\n\r\n\t\t\t\t\t\tvar a = [], b;\r\n\r\n\t\t\t\t\t\t// find delimiters\r\n\t\t\t\t\t\tlist = list.map(l => {\r\n\t\t\t\t\t\t\tif (l.type == 'element' && l.name == s\r\n\t\t\t\t\t\t\t\t\t&& !l.children.length) {\r\n\t\t\t\t\t\t\t\treturn ({\r\n\t\t\t\t\t\t\t\t\ttype: 'delimiter'\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn l;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// trim left\r\n\t\t\t\t\t\tif (list.length && list[0].type == 'text'\r\n\t\t\t\t\t\t\t\t&& !list[0].text.trim()) {\r\n\t\t\t\t\t\t\tlist = list.slice(1);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// add omitted delimiter\r\n\t\t\t\t\t\tif (!(list.length && list[0].type == 'delimiter')) {\r\n\t\t\t\t\t\t\tlist.unshift({\r\n\t\t\t\t\t\t\t\ttype: 'delimiter'\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) {\r\n\t\t\t\t\t\t\tif (list[i].type == 'delimiter') {\r\n\t\t\t\t\t\t\t\tif (b) a.push(b);\r\n\t\t\t\t\t\t\t\tb = [];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tb.push(list[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ta.push(b);\r\n\r\n\t\t\t\t\t\treturn a.map(e => recurseSplit(e, split.slice(0, -1)));\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\treturn classMap[tree.name].instantiate({\r\n\t\t\t\t\t\tcode: tree.code,\r\n\t\t\t\t\t\tchildren: recurseSplit(\r\n\t\t\t\t\t\t\ttree.children,\r\n\t\t\t\t\t\t\tclassMap[tree.name].split\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\toptions\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn classMap[tree.name].instantiate({\r\n\t\t\t\t\tcode: tree.code,\r\n\t\t\t\t\tchildren: tree.children.map(c => recurse(c, false)),\r\n\t\t\t\t\toptions\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn new ErrorNode({\r\n\t\t\t\tmessage: tree.name ? 'Undefined tag name' : 'No tag name',\r\n\t\t\t\tcode: tree.code\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthrow TypeError(tree.type);\r\n\t}\r\n\r\n\tvar root = recurse(ast.root, true);\r\n\treturn root;\r\n}\r\n\r\nmodule.exports = {\r\n\tast2nt,\r\n\tNode,\r\n\tTextNode,\r\n\tHtmlNode,\r\n\tErrorNode,\r\n\tElementClass,\r\n\tElement\r\n};\r\n\n\n//# sourceURL=webpack://m42kup/./src/renderer/index.js?");

/***/ }),

/***/ "./src/renderer/nodes.js":
/*!*******************************!*\
  !*** ./src/renderer/nodes.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nfunction Node() {\r\n}\r\n\r\nfunction extendNode(C) {\r\n\tC.prototype = Object.create(Node.prototype);\r\n\tObject.defineProperty(C.prototype, 'constructor', {\r\n\t\tvalue: C,\r\n\t\tenumerable: false,\r\n\t\twritable: true\r\n\t});\r\n}\r\n\r\n/*\r\n * the data part of TextNode and HtmlNode instances are intentionally\r\n * labeled differently, in order to prevent mistakenly\r\n * using unescaped text data as HTML data, which is an XSS\r\n * vulnerability.\r\n */\r\nfunction TextNode(text) {\r\n\tif (typeof text != 'string')\r\n\t\tthrow TypeError('text not string');\r\n\r\n\tthis.text = text;\r\n}\r\n\r\nextendNode(TextNode);\r\n\r\nTextNode.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n}\r\n\r\nTextNode.prototype.toIndentedString = function (level) {\r\n\treturn '\\t'.repeat(level) + `Text {${JSON.stringify(this.text)}}`;\r\n}\r\n\r\nfunction HtmlNode({html, display}) {\r\n\tif (typeof html != 'string')\r\n\t\tthrow TypeError('html not string');\r\n\r\n\tif (!['inline', 'leaf-block', 'container-block'].includes(display))\r\n\t\tthrow TypeError('arg0.display should be one of \"inline\", \"leaf-block\", or \"container-block\".');\r\n\r\n\tthis.html = html;\r\n\tthis.display = display;\r\n}\r\n\r\nextendNode(HtmlNode);\r\n\r\nHtmlNode.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n}\r\n\r\nHtmlNode.prototype.toIndentedString = function (level) {\r\n\tvar a = ['display'].map(k =>\r\n\t\tk + '=' + JSON.stringify(this[k])).join(' ');\r\n\treturn '\\t'.repeat(level) + `Html(${a}) {${JSON.stringify(this.html)}}`;\r\n}\r\n\r\nfunction ErrorNode({message, code}) {\r\n\tif (typeof message != 'string')\r\n\t\tthrow TypeError('message not string');\r\n\r\n\tif (typeof code != 'string')\r\n\t\tthrow TypeError('code not string');\r\n\r\n\tthis.message = message;\r\n\tthis.code = code;\r\n}\r\n\r\nextendNode(ErrorNode);\r\n\r\nErrorNode.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n}\r\n\r\nErrorNode.prototype.toIndentedString = function (level) {\r\n\tvar a = ['message', 'code'].map(k =>\r\n\t\tk + '=' + JSON.stringify(this[k])).join(' ');\r\n\treturn '\\t'.repeat(level) + `Error(${a})`;\r\n}\r\n\r\nfunction ElementClass({name, display, render, split}) {\r\n\tif (!name) throw TypeError('You give arg0 a bad name');\r\n\tif (!['inline', 'leaf-block', 'container-block'].includes(display))\r\n\t\tthrow TypeError('arg0.display should be one of \"inline\", \"leaf-block\", or \"container-block\".');\r\n\tif (!(render instanceof Function))\r\n\t\tthrow TypeError('arg0.render should be a function');\r\n\r\n\t[this.name, this.display] = [name, display];\r\n\r\n\tthis.render = (el, options) => {\r\n\t\tif (!(el instanceof Element))\r\n\t\t\tthrow TypeError('arg0 should be an instance of m42kup.renderer.Element');\r\n\t\treturn render(el, options);\r\n\t};\r\n\r\n\tif (typeof split != 'undefined') {\r\n\t\tif (typeof split == 'string') split = [split];\r\n\r\n\t\tif (!(split instanceof Array))\r\n\t\t\tthrow TypeError('arg0.split should be either undefined, a string, or an array');\r\n\r\n\t\tif (!split.length)\r\n\t\t\tthrow TypeError('arg0.split.length == 0');\r\n\r\n\t\tthis.split = split;\r\n\t}\r\n}\r\n\r\nElementClass.prototype.instantiate = function ({code, children, options}) {\r\n\tif (!(this instanceof ElementClass)) {\r\n\t\tthrow Error('ElementClass.prototype.instantiate should be called as a method of an ElementClass instance');\r\n\t}\r\n\r\n\treturn new Element({\r\n\t\tname: this.name,\r\n\t\tdisplay: this.display,\r\n\t\trender: this.render,\r\n\t\tcode,\r\n\t\tchildren,\r\n\t\tsplit: this.split,\r\n\t\toptions\r\n\t});\r\n}\r\n\r\nfunction Element({name, display, render, code, children, split, options}) {\r\n\tif (!name) throw TypeError('You give arg0 a bad name');\r\n\tif (!['inline', 'leaf-block', 'container-block'].includes(display))\r\n\t\tthrow TypeError('arg0.display should be one of \"inline\", \"leaf-block\", or \"container-block\".');\r\n\tif (!(render instanceof Function))\r\n\t\tthrow TypeError('arg0.render should be a function');\r\n\tif (typeof code != 'string') throw TypeError('You give arg0 a bad code');\r\n\r\n\t(() => {\r\n\t\tvar foo = c => c instanceof Element\r\n\t\t\t|| c instanceof TextNode\r\n\t\t\t|| c instanceof ErrorNode\r\n\t\t\t|| ((c instanceof Array) && c.every(foo));\r\n\r\n\t\tif (!children.every(foo))\r\n\t\t\tthrow TypeError('All arg0.children should either be an Element, a TextNode, or an ErrorNode');\r\n\t})();\r\n\r\n\tif (typeof split != 'undefined') {\r\n\t\tif (typeof split == 'string') split = [split];\r\n\r\n\t\tif (!(split instanceof Array))\r\n\t\t\tthrow TypeError('arg0.split should be either undefined, a string, or an array');\r\n\r\n\t\tif (!split.length)\r\n\t\t\tthrow TypeError('arg0.split.length == 0');\r\n\r\n\t\tthis.split = split;\r\n\t}\r\n\r\n\t[this.name, this.display, this.code, this.children]\r\n\t\t= [name, display, code, children];\r\n\r\n\tthis.innerIsText = (() => {\r\n\t\tvar len = split ? split.length : 0;\r\n\r\n\t\tvar foo = (li, le) => {\r\n\t\t\tif (le > 0)\r\n\t\t\t\treturn li.map(l => foo(l, le - 1));\r\n\t\t\t\r\n\t\t\treturn li.map(c => {\r\n\t\t\t\tif (c instanceof TextNode) return true;\r\n\t\t\t\tif (c instanceof ErrorNode) return false;\r\n\t\t\t\treturn c.outerIsText;\r\n\t\t\t}).every(e => e);\r\n\t\t};\r\n\r\n\t\treturn foo(children, len);\r\n\t})();\r\n\r\n\tthis.innerText = (() => {\r\n\t\tvar len = split ? split.length : 0;\r\n\r\n\t\tvar foo = (li, le, iit) => {\r\n\t\t\tif (le > 0)\r\n\t\t\t\treturn li.map((l, i) => foo(l, le - 1, iit[i]));\r\n\t\t\t\r\n\t\t\treturn iit\r\n\t\t\t\t? li.map(c => {\r\n\t\t\t\t\tif (c instanceof TextNode) return c.text;\r\n\t\t\t\t\treturn c.outerText;\r\n\t\t\t\t}).join('')\r\n\t\t\t\t: null;\r\n\t\t};\r\n\r\n\t\treturn foo(children, len, this.innerIsText);\r\n\t})();\r\n\r\n\tthis.innerHtml = (() => {\r\n\t\tvar len = split ? split.length : 0;\r\n\r\n\t\tvar foo = (li, le, iit, it) => {\r\n\t\t\tif (le > 0)\r\n\t\t\t\treturn li.map((l, i) => foo(l, le - 1, iit[i], it[i]));\r\n\r\n\t\t\tif (iit) {\r\n\t\t\t\tif (it.trim() && this.display == 'container-block') {\r\n\t\t\t\t\treturn it\r\n\t\t\t\t\t\t// ?: is important\r\n\t\t\t\t\t\t.split(/(?:\\r\\n[ \\t]*){2,}|(?:\\r[ \\t]*){2,}|(?:\\n[ \\t]*){2,}/)\r\n\t\t\t\t\t\t.filter(text => !!text.trim())\r\n\t\t\t\t\t\t.map(this.escapeHtml)\r\n\t\t\t\t\t\t.map(s => `<p>${s}</p>`).join('');\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.escapeHtml(it);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.display != 'container-block') {\r\n\t\t\t\t// join as HTML\r\n\t\t\t\treturn li.map(c => {\r\n\t\t\t\t\tif (c instanceof TextNode)\r\n\t\t\t\t\t\treturn this.escapeHtml(c.text);\r\n\t\t\t\t\tif (c instanceof ErrorNode)\r\n\t\t\t\t\t\treturn '<code class=\"m42kup-error\">' + this.escapeHtml(c.code) + '</code>';\r\n\t\t\t\t\treturn c.outerHtml;\r\n\t\t\t\t}).join('');\r\n\t\t\t}\r\n\r\n\t\t\tvar paragraphs = [], p = [];\r\n\r\n\t\t\tvar commit = () => {\r\n\t\t\t\tif (p.length) {\r\n\t\t\t\t\tparagraphs.push(p);\r\n\t\t\t\t\tp = [];\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar add = e => p.push(e);\r\n\r\n\t\t\tli.forEach(c => {\r\n\t\t\t\tif (c instanceof TextNode) {\r\n\t\t\t\t\t// ?: is important\r\n\t\t\t\t\tvar split = c.text.split(/(?:\\r\\n[ \\t]*){2,}|(?:\\r[ \\t]*){2,}|(?:\\n[ \\t]*){2,}/);\r\n\t\t\t\t\tif (split.length < 2) {\r\n\t\t\t\t\t\treturn add(c);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsplit.forEach((s, i) => {\r\n\t\t\t\t\t\tif (s.trim()) add(this.text(s));\r\n\r\n\t\t\t\t\t\tif (i < split.length - 1) commit();\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if (c instanceof ErrorNode) {\r\n\t\t\t\t\t// treat errors like inlines\r\n\t\t\t\t\tadd(c);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// blocks interrupt paragraphs\r\n\t\t\t\t\tif (c.display != 'inline') {\r\n\t\t\t\t\t\tcommit();\r\n\t\t\t\t\t\t// direct push to list differentiates non-paragraphs\r\n\t\t\t\t\t\tparagraphs.push(c);\r\n\t\t\t\t\t\tcommit();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// inlines do not interrupt paragraphs\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tadd(c);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tcommit();\r\n\r\n\t\t\treturn paragraphs.map(p => {\r\n\t\t\t\tif (p instanceof Array) {\r\n\t\t\t\t\treturn '<p>' + p.map(n => {\r\n\t\t\t\t\t\tif (n instanceof TextNode)\r\n\t\t\t\t\t\t\treturn this.escapeHtml(n.text);\r\n\t\t\t\t\t\tif (n instanceof ErrorNode)\r\n\t\t\t\t\t\t\treturn '<code class=\"m42kup-error\">'\r\n\t\t\t\t\t\t\t\t+ this.escapeHtml(n.code) + '</code>';\r\n\t\t\t\t\t\treturn n.outerHtml;\r\n\t\t\t\t\t}).join('') + '</p>';\r\n\t\t\t\t}\r\n\t\t\t\t// non-paragraphs\r\n\t\t\t\treturn p.outerHtml;\r\n\t\t\t}).join('');\r\n\t\t};\r\n\r\n\t\treturn foo(children, len, this.innerIsText, this.innerText);\r\n\t})();\r\n\r\n\tvar r = render(this, options);\r\n\tthis.outerIsText = r instanceof TextNode;\r\n\tthis.outerText = this.outerIsText ? r.text : null;\r\n\tthis.isError = r instanceof ErrorNode;\r\n\tthis.errorMessage = r instanceof ErrorNode ? r.message : null;\r\n\r\n\tif (this.outerIsText) {\r\n\t\tthis.outerHtml = this.escapeHtml(this.outerText);\r\n\t} else if (r instanceof HtmlNode) {\r\n\t\tthis.outerHtml = r.html;\r\n\t} else if (r instanceof ErrorNode) {\r\n\t\tthis.outerHtml = '<code class=\"m42kup-error\">'\r\n\t\t\t+ this.escapeHtml(r.code) + '</code>';\r\n\t} else {\r\n\t\tthrow TypeError('Render output should be one of TextNode, HtmlNode, or ErrorNode');\r\n\t}\r\n}\r\n\r\nextendNode(Element);\r\n\r\nElement.prototype.text = function (text) {\r\n\treturn new TextNode(text);\r\n};\r\n\r\nElement.prototype.html = function (html) {\r\n\treturn new HtmlNode({html, display: this.display});\r\n};\r\n\r\nElement.prototype.error = function (message) {\r\n\treturn new ErrorNode({message, code: this.code});\r\n};\r\n\r\nElement.prototype.toString = function () {\r\n\treturn this.toIndentedString(0);\r\n};\r\n\r\nElement.prototype.toIndentedString = function (level) {\r\n\tvar a = [\r\n\t\t'display', 'code', 'split', 'isError', 'errorMessage',\r\n\t\t'innerIsText', 'innerText', 'innerHtml', 'outerIsText', 'outerText',\r\n\t\t'outerHtml'\r\n\t].map(k => k + '=' + (typeof this[k] == 'string' || this[k] instanceof Array ? JSON.stringify(this[k]) : this[k] + '')).join('\\n' + '\\t'.repeat(level + 1));\r\n\r\n\tvar b;\r\n\t(() => {\r\n\t\tvar foo = (c, lev) => {\r\n\t\t\tif (c instanceof Array)\r\n\t\t\t\treturn c.map(foo).join(',\\n');\r\n\t\t\telse\r\n\t\t\t\treturn c.toIndentedString(level + 1)\r\n\t\t}\r\n\r\n\t\tb = this.children.map(foo).join(',\\n');\r\n\t})();\r\n\r\n\treturn '\\t'.repeat(level) + `Element[${JSON.stringify(this.name)}](\\n${'\\t'.repeat(level + 1)}${a}\\n${'\\t'.repeat(level)}) {\\n${b}\\n${'\\t'.repeat(level)}}`;\r\n};\r\n\r\nElement.prototype.escapeHtml = s => (s + '').replace(/[&<>\"']/g, m => ({\r\n\t'&': '&amp;', '<': '&lt;', '>': '&gt;',\r\n\t'\"': '&quot;', \"'\": '&#39;'\r\n})[m]);\r\n\r\nmodule.exports = {\r\n\tNode,\r\n\tTextNode,\r\n\tHtmlNode,\r\n\tErrorNode,\r\n\tElementClass,\r\n\tElement\r\n};\n\n//# sourceURL=webpack://m42kup/./src/renderer/nodes.js?");

/***/ })

/******/ });